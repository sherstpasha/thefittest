Search.setIndex({"alltitles": {"Modules": [[4, "modules"]], "References": [[13, "references"]], "Welcome to Thefittest\u2019s documentation!": [[0, "welcome-to-thefittest-s-documentation"]], "base": [[1, "module-thefittest.base"]], "benchmarks": [[2, "module-thefittest.benchmarks"]], "classifiers": [[3, "module-thefittest.classifiers"]], "crossovers": [[7, "module-thefittest.utils.crossovers"]], "mutations": [[9, "module-thefittest.utils.mutations"]], "optimizers": [[5, "module-thefittest.optimizers"]], "random": [[10, "module-thefittest.utils.random"]], "regressors": [[6, "module-thefittest.regressors"]], "selections": [[11, "module-thefittest.utils.selections"]], "transformations": [[12, "module-thefittest.utils.transformations"]], "utils": [[8, "utils"]]}, "docnames": ["index", "modules/base", "modules/benchmarks", "modules/classifiers", "modules/index", "modules/optimizers", "modules/regressors", "modules/utils/crossovers", "modules/utils/index", "modules/utils/mutations", "modules/utils/random", "modules/utils/selections", "modules/utils/transformations", "references"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2}, "filenames": ["index.rst", "modules/base.rst", "modules/benchmarks.rst", "modules/classifiers.rst", "modules/index.rst", "modules/optimizers.rst", "modules/regressors.rst", "modules/utils/crossovers.rst", "modules/utils/index.rst", "modules/utils/mutations.rst", "modules/utils/random.rst", "modules/utils/selections.rst", "modules/utils/transformations.rst", "references.rst"], "indexentries": {"ackley (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Ackley", false]], "banknotedataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.BanknoteDataset", false]], "best_1() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.best_1", false]], "best_2() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.best_2", false]], "binary_string_population() (thefittest.optimizers.geneticalgorithm static method)": [[5, "thefittest.optimizers.GeneticAlgorithm.binary_string_population", false]], "binary_string_population() (thefittest.optimizers.shaga static method)": [[5, "thefittest.optimizers.SHAGA.binary_string_population", false]], "binomial() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.binomial", false]], "binomialga() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.binomialGA", false]], "bit_to_gray() (thefittest.utils.transformations.graycode static method)": [[12, "thefittest.utils.transformations.GrayCode.bit_to_gray", false]], "bit_to_int() (thefittest.utils.transformations.samplinggrid static method)": [[12, "thefittest.utils.transformations.SamplingGrid.bit_to_int", false]], "breastcancerdataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.BreastCancerDataset", false]], "cauchy_distribution() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.cauchy_distribution", false]], "check_random_state() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.check_random_state", false]], "concat() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.concat", false]], "copy() (thefittest.base.net method)": [[1, "thefittest.base.Net.copy", false]], "copy() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.copy", false]], "creditriskdataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.CreditRiskDataset", false]], "current_to_best_1() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.current_to_best_1", false]], "current_to_pbest_1_archive() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.current_to_pbest_1_archive", false]], "current_to_pbest_1_archive_p_min() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.current_to_pbest_1_archive_p_min", false]], "current_to_rand_1() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.current_to_rand_1", false]], "differentialevolution (class in thefittest.optimizers)": [[5, "thefittest.optimizers.DifferentialEvolution", false]], "digitsdataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.DigitsDataset", false]], "empty_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.empty_crossover", false]], "empty_crossovergp() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.empty_crossoverGP", false]], "ephemeralnode (class in thefittest.base)": [[1, "thefittest.base.EphemeralNode", false]], "f() (thefittest.benchmarks.ackley method)": [[2, "thefittest.benchmarks.Ackley.f", false]], "f() (thefittest.benchmarks.griewank method)": [[2, "thefittest.benchmarks.Griewank.f", false]], "f() (thefittest.benchmarks.highconditionedelliptic method)": [[2, "thefittest.benchmarks.HighConditionedElliptic.f", false]], "f() (thefittest.benchmarks.onemax method)": [[2, "thefittest.benchmarks.OneMax.f", false]], "f() (thefittest.benchmarks.rastrigin method)": [[2, "thefittest.benchmarks.Rastrigin.f", false]], "f() (thefittest.benchmarks.rosenbrock method)": [[2, "thefittest.benchmarks.Rosenbrock.f", false]], "f() (thefittest.benchmarks.schwefe1_2 method)": [[2, "thefittest.benchmarks.Schwefe1_2.f", false]], "f() (thefittest.benchmarks.sphere method)": [[2, "thefittest.benchmarks.Sphere.f", false]], "f() (thefittest.benchmarks.weierstrass method)": [[2, "thefittest.benchmarks.Weierstrass.f", false]], "fit() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.fit", false]], "flip_coin() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.flip_coin", false]], "flip_mutation() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.flip_mutation", false]], "float_population() (thefittest.optimizers.differentialevolution static method)": [[5, "thefittest.optimizers.DifferentialEvolution.float_population", false]], "forward() (thefittest.base.net method)": [[1, "thefittest.base.Net.forward", false]], "full_growing_method() (thefittest.base.tree class method)": [[1, "thefittest.base.Tree.full_growing_method", false]], "functionalnode (class in thefittest.base)": [[1, "thefittest.base.FunctionalNode", false]], "generator1() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.generator1", false]], "generator2() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.generator2", false]], "geneticalgorithm (class in thefittest.optimizers)": [[5, "thefittest.optimizers.GeneticAlgorithm", false]], "geneticprogramming (class in thefittest.optimizers)": [[5, "thefittest.optimizers.GeneticProgramming", false]], "geneticprogrammingclassifier (class in thefittest.classifiers)": [[3, "thefittest.classifiers.GeneticProgrammingClassifier", false]], "geneticprogrammingneuralnetclassifier (class in thefittest.classifiers)": [[3, "thefittest.classifiers.GeneticProgrammingNeuralNetClassifier", false]], "geneticprogrammingneuralnetregressor (class in thefittest.regressors)": [[6, "thefittest.regressors.GeneticProgrammingNeuralNetRegressor", false]], "get_args_id() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.get_args_id", false]], "get_bits_per_variable() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.get_bits_per_variable", false]], "get_common_region() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.get_common_region", false]], "get_graph() (thefittest.base.net method)": [[1, "thefittest.base.Net.get_graph", false]], "get_graph() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.get_graph", false]], "get_h_per_variable() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.get_h_per_variable", false]], "get_left_border() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.get_left_border", false]], "get_levels() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.get_levels", false]], "get_max_level() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.get_max_level", false]], "get_num_variables() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.get_num_variables", false]], "get_right_border() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.get_right_border", false]], "gray_to_bit() (thefittest.utils.transformations.graycode static method)": [[12, "thefittest.utils.transformations.GrayCode.gray_to_bit", false]], "graycode (class in thefittest.utils.transformations)": [[12, "thefittest.utils.transformations.GrayCode", false]], "griewank (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Griewank", false]], "growing_method() (thefittest.base.tree class method)": [[1, "thefittest.base.Tree.growing_method", false]], "growing_mutation() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.growing_mutation", false]], "half_and_half() (thefittest.optimizers.geneticprogramming static method)": [[5, "thefittest.optimizers.GeneticProgramming.half_and_half", false]], "highconditionedelliptic (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.HighConditionedElliptic", false]], "init_symbolic_regression_uniset() (in module thefittest.base)": [[1, "thefittest.base.init_symbolic_regression_uniset", false]], "int_to_bit() (thefittest.utils.transformations.samplinggrid static method)": [[12, "thefittest.utils.transformations.SamplingGrid.int_to_bit", false]], "inverse_transform() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.inverse_transform", false]], "irisdataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.IrisDataset", false]], "jde (class in thefittest.optimizers)": [[5, "thefittest.optimizers.jDE", false]], "minmax_scale() (in module thefittest.utils.transformations)": [[12, "thefittest.utils.transformations.minmax_scale", false]], "mlpeaclassifier (class in thefittest.classifiers)": [[3, "thefittest.classifiers.MLPEAClassifier", false]], "mlpearegressor (class in thefittest.regressors)": [[6, "thefittest.regressors.MLPEARegressor", false]], "module": [[1, "module-thefittest.base", false], [2, "module-thefittest.benchmarks", false], [3, "module-thefittest.classifiers", false], [5, "module-thefittest.optimizers", false], [6, "module-thefittest.regressors", false], [7, "module-thefittest.utils.crossovers", false], [9, "module-thefittest.utils.mutations", false], [10, "module-thefittest.utils.random", false], [11, "module-thefittest.utils.selections", false], [12, "module-thefittest.utils.transformations", false]], "net (class in thefittest.base)": [[1, "thefittest.base.Net", false]], "numba_seed() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.numba_seed", false]], "one_point_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.one_point_crossover", false]], "one_point_crossovergp() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.one_point_crossoverGP", false]], "onemax (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.OneMax", false]], "pdpga (class in thefittest.optimizers)": [[5, "thefittest.optimizers.PDPGA", false]], "pdpgp (class in thefittest.optimizers)": [[5, "thefittest.optimizers.PDPGP", false]], "plot() (thefittest.base.net method)": [[1, "thefittest.base.Net.plot", false]], "plot() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.plot", false]], "point_mutation() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.point_mutation", false]], "predict() (thefittest.classifiers.geneticprogrammingclassifier method)": [[3, "thefittest.classifiers.GeneticProgrammingClassifier.predict", false]], "predict() (thefittest.classifiers.geneticprogrammingneuralnetclassifier method)": [[3, "thefittest.classifiers.GeneticProgrammingNeuralNetClassifier.predict", false]], "predict() (thefittest.classifiers.mlpeaclassifier method)": [[3, "thefittest.classifiers.MLPEAClassifier.predict", false]], "predict() (thefittest.regressors.geneticprogrammingneuralnetregressor method)": [[6, "thefittest.regressors.GeneticProgrammingNeuralNetRegressor.predict", false]], "predict() (thefittest.regressors.mlpearegressor method)": [[6, "thefittest.regressors.MLPEARegressor.predict", false]], "predict_proba() (thefittest.classifiers.geneticprogrammingclassifier method)": [[3, "thefittest.classifiers.GeneticProgrammingClassifier.predict_proba", false]], "predict_proba() (thefittest.classifiers.geneticprogrammingneuralnetclassifier method)": [[3, "thefittest.classifiers.GeneticProgrammingNeuralNetClassifier.predict_proba", false]], "predict_proba() (thefittest.classifiers.mlpeaclassifier method)": [[3, "thefittest.classifiers.MLPEAClassifier.predict_proba", false]], "proportional_selection() (in module thefittest.utils.selections)": [[11, "thefittest.utils.selections.proportional_selection", false]], "rand_1() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.rand_1", false]], "rand_2() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.rand_2", false]], "rand_to_best1() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.rand_to_best1", false]], "randint() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.randint", false]], "random_sample() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.random_sample", false]], "random_tree() (thefittest.base.tree class method)": [[1, "thefittest.base.Tree.random_tree", false]], "random_weighted_sample() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.random_weighted_sample", false]], "rank_selection() (in module thefittest.utils.selections)": [[11, "thefittest.utils.selections.rank_selection", false]], "rastrigin (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Rastrigin", false]], "rosenbrock (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Rosenbrock", false]], "samplinggrid (class in thefittest.utils.transformations)": [[12, "thefittest.utils.transformations.SamplingGrid", false]], "sattolo_shuffle() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.sattolo_shuffle", false]], "sattolo_shuffle_2d() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.sattolo_shuffle_2d", false]], "schwefe1_2 (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Schwefe1_2", false]], "selfcga (class in thefittest.optimizers)": [[5, "thefittest.optimizers.SelfCGA", false]], "selfcgp (class in thefittest.optimizers)": [[5, "thefittest.optimizers.SelfCGP", false]], "set_score_request() (thefittest.classifiers.geneticprogrammingclassifier method)": [[3, "thefittest.classifiers.GeneticProgrammingClassifier.set_score_request", false]], "set_score_request() (thefittest.classifiers.geneticprogrammingneuralnetclassifier method)": [[3, "thefittest.classifiers.GeneticProgrammingNeuralNetClassifier.set_score_request", false]], "set_score_request() (thefittest.classifiers.mlpeaclassifier method)": [[3, "thefittest.classifiers.MLPEAClassifier.set_score_request", false]], "set_score_request() (thefittest.regressors.geneticprogrammingneuralnetregressor method)": [[6, "thefittest.regressors.GeneticProgrammingNeuralNetRegressor.set_score_request", false]], "set_score_request() (thefittest.regressors.mlpearegressor method)": [[6, "thefittest.regressors.MLPEARegressor.set_score_request", false]], "set_terminals() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.set_terminals", false]], "shade (class in thefittest.optimizers)": [[5, "thefittest.optimizers.SHADE", false]], "shaga (class in thefittest.optimizers)": [[5, "thefittest.optimizers.SHAGA", false]], "shrink_mutation() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.shrink_mutation", false]], "sphere (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Sphere", false]], "standard_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.standard_crossover", false]], "subtree() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.subtree", false]], "subtree_id() (thefittest.base.tree method)": [[1, "thefittest.base.Tree.subtree_id", false]], "swap_mutation() (in module thefittest.utils.mutations)": [[9, "thefittest.utils.mutations.swap_mutation", false]], "terminalnode (class in thefittest.base)": [[1, "thefittest.base.TerminalNode", false]], "thefittest.base": [[1, "module-thefittest.base", false]], "thefittest.benchmarks": [[2, "module-thefittest.benchmarks", false]], "thefittest.classifiers": [[3, "module-thefittest.classifiers", false]], "thefittest.optimizers": [[5, "module-thefittest.optimizers", false]], "thefittest.regressors": [[6, "module-thefittest.regressors", false]], "thefittest.utils.crossovers": [[7, "module-thefittest.utils.crossovers", false]], "thefittest.utils.mutations": [[9, "module-thefittest.utils.mutations", false]], "thefittest.utils.random": [[10, "module-thefittest.utils.random", false]], "thefittest.utils.selections": [[11, "module-thefittest.utils.selections", false]], "thefittest.utils.transformations": [[12, "module-thefittest.utils.transformations", false]], "tournament_selection() (in module thefittest.utils.selections)": [[11, "thefittest.utils.selections.tournament_selection", false]], "transform() (thefittest.utils.transformations.samplinggrid method)": [[12, "thefittest.utils.transformations.SamplingGrid.transform", false]], "tree (class in thefittest.base)": [[1, "thefittest.base.Tree", false]], "two_point_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.two_point_crossover", false]], "uniform() (in module thefittest.utils.random)": [[10, "thefittest.utils.random.uniform", false]], "uniform_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_crossover", false]], "uniform_crossovergp() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_crossoverGP", false]], "uniform_proportional_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_proportional_crossover", false]], "uniform_proportional_crossover_gp() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_proportional_crossover_GP", false]], "uniform_rank_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_rank_crossover", false]], "uniform_rank_crossover_gp() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_rank_crossover_GP", false]], "uniform_tournament_crossover() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_tournament_crossover", false]], "uniform_tournament_crossover_gp() (in module thefittest.utils.crossovers)": [[7, "thefittest.utils.crossovers.uniform_tournament_crossover_GP", false]], "universalset (class in thefittest.base)": [[1, "thefittest.base.UniversalSet", false]], "userknowladgedataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.UserKnowladgeDataset", false]], "weierstrass (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.Weierstrass", false]], "winedataset (class in thefittest.benchmarks)": [[2, "thefittest.benchmarks.WineDataset", false]]}, "objects": {"thefittest": [[1, 0, 0, "-", "base"], [2, 0, 0, "-", "benchmarks"], [3, 0, 0, "-", "classifiers"], [5, 0, 0, "-", "optimizers"], [6, 0, 0, "-", "regressors"]], "thefittest.base": [[1, 1, 1, "", "EphemeralNode"], [1, 1, 1, "", "FunctionalNode"], [1, 1, 1, "", "Net"], [1, 1, 1, "", "TerminalNode"], [1, 1, 1, "", "Tree"], [1, 1, 1, "", "UniversalSet"], [1, 3, 1, "", "init_symbolic_regression_uniset"]], "thefittest.base.Net": [[1, 2, 1, "", "copy"], [1, 2, 1, "", "forward"], [1, 2, 1, "", "get_graph"], [1, 2, 1, "", "plot"]], "thefittest.base.Tree": [[1, 2, 1, "", "concat"], [1, 2, 1, "", "copy"], [1, 2, 1, "", "full_growing_method"], [1, 2, 1, "", "get_args_id"], [1, 2, 1, "", "get_common_region"], [1, 2, 1, "", "get_graph"], [1, 2, 1, "", "get_levels"], [1, 2, 1, "", "get_max_level"], [1, 2, 1, "", "growing_method"], [1, 2, 1, "", "plot"], [1, 2, 1, "", "random_tree"], [1, 2, 1, "", "set_terminals"], [1, 2, 1, "", "subtree"], [1, 2, 1, "", "subtree_id"]], "thefittest.benchmarks": [[2, 1, 1, "", "Ackley"], [2, 1, 1, "", "BanknoteDataset"], [2, 1, 1, "", "BreastCancerDataset"], [2, 1, 1, "", "CreditRiskDataset"], [2, 1, 1, "", "DigitsDataset"], [2, 1, 1, "", "Griewank"], [2, 1, 1, "", "HighConditionedElliptic"], [2, 1, 1, "", "IrisDataset"], [2, 1, 1, "", "OneMax"], [2, 1, 1, "", "Rastrigin"], [2, 1, 1, "", "Rosenbrock"], [2, 1, 1, "", "Schwefe1_2"], [2, 1, 1, "", "Sphere"], [2, 1, 1, "", "UserKnowladgeDataset"], [2, 1, 1, "", "Weierstrass"], [2, 1, 1, "", "WineDataset"]], "thefittest.benchmarks.Ackley": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.Griewank": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.HighConditionedElliptic": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.OneMax": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.Rastrigin": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.Rosenbrock": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.Schwefe1_2": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.Sphere": [[2, 2, 1, "", "f"]], "thefittest.benchmarks.Weierstrass": [[2, 2, 1, "", "f"]], "thefittest.classifiers": [[3, 1, 1, "", "GeneticProgrammingClassifier"], [3, 1, 1, "", "GeneticProgrammingNeuralNetClassifier"], [3, 1, 1, "", "MLPEAClassifier"]], "thefittest.classifiers.GeneticProgrammingClassifier": [[3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_proba"], [3, 2, 1, "", "set_score_request"]], "thefittest.classifiers.GeneticProgrammingNeuralNetClassifier": [[3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_proba"], [3, 2, 1, "", "set_score_request"]], "thefittest.classifiers.MLPEAClassifier": [[3, 2, 1, "", "predict"], [3, 2, 1, "", "predict_proba"], [3, 2, 1, "", "set_score_request"]], "thefittest.optimizers": [[5, 1, 1, "", "DifferentialEvolution"], [5, 1, 1, "", "GeneticAlgorithm"], [5, 1, 1, "", "GeneticProgramming"], [5, 1, 1, "", "PDPGA"], [5, 1, 1, "", "PDPGP"], [5, 1, 1, "", "SHADE"], [5, 1, 1, "", "SHAGA"], [5, 1, 1, "", "SelfCGA"], [5, 1, 1, "", "SelfCGP"], [5, 1, 1, "", "jDE"]], "thefittest.optimizers.DifferentialEvolution": [[5, 2, 1, "", "float_population"]], "thefittest.optimizers.GeneticAlgorithm": [[5, 2, 1, "", "binary_string_population"]], "thefittest.optimizers.GeneticProgramming": [[5, 2, 1, "", "half_and_half"]], "thefittest.optimizers.SHAGA": [[5, 2, 1, "", "binary_string_population"]], "thefittest.regressors": [[6, 1, 1, "", "GeneticProgrammingNeuralNetRegressor"], [6, 1, 1, "", "MLPEARegressor"]], "thefittest.regressors.GeneticProgrammingNeuralNetRegressor": [[6, 2, 1, "", "predict"], [6, 2, 1, "", "set_score_request"]], "thefittest.regressors.MLPEARegressor": [[6, 2, 1, "", "predict"], [6, 2, 1, "", "set_score_request"]], "thefittest.utils": [[7, 0, 0, "-", "crossovers"], [9, 0, 0, "-", "mutations"], [10, 0, 0, "-", "random"], [11, 0, 0, "-", "selections"], [12, 0, 0, "-", "transformations"]], "thefittest.utils.crossovers": [[7, 3, 1, "", "binomial"], [7, 3, 1, "", "binomialGA"], [7, 3, 1, "", "empty_crossover"], [7, 3, 1, "", "empty_crossoverGP"], [7, 3, 1, "", "one_point_crossover"], [7, 3, 1, "", "one_point_crossoverGP"], [7, 3, 1, "", "standard_crossover"], [7, 3, 1, "", "two_point_crossover"], [7, 3, 1, "", "uniform_crossover"], [7, 3, 1, "", "uniform_crossoverGP"], [7, 3, 1, "", "uniform_proportional_crossover"], [7, 3, 1, "", "uniform_proportional_crossover_GP"], [7, 3, 1, "", "uniform_rank_crossover"], [7, 3, 1, "", "uniform_rank_crossover_GP"], [7, 3, 1, "", "uniform_tournament_crossover"], [7, 3, 1, "", "uniform_tournament_crossover_GP"]], "thefittest.utils.mutations": [[9, 3, 1, "", "best_1"], [9, 3, 1, "", "best_2"], [9, 3, 1, "", "current_to_best_1"], [9, 3, 1, "", "current_to_pbest_1_archive"], [9, 3, 1, "", "current_to_pbest_1_archive_p_min"], [9, 3, 1, "", "current_to_rand_1"], [9, 3, 1, "", "flip_mutation"], [9, 3, 1, "", "growing_mutation"], [9, 3, 1, "", "point_mutation"], [9, 3, 1, "", "rand_1"], [9, 3, 1, "", "rand_2"], [9, 3, 1, "", "rand_to_best1"], [9, 3, 1, "", "shrink_mutation"], [9, 3, 1, "", "swap_mutation"]], "thefittest.utils.random": [[10, 3, 1, "", "cauchy_distribution"], [10, 3, 1, "", "check_random_state"], [10, 3, 1, "", "flip_coin"], [10, 3, 1, "", "generator1"], [10, 3, 1, "", "generator2"], [10, 3, 1, "", "numba_seed"], [10, 3, 1, "", "randint"], [10, 3, 1, "", "random_sample"], [10, 3, 1, "", "random_weighted_sample"], [10, 3, 1, "", "sattolo_shuffle"], [10, 3, 1, "", "sattolo_shuffle_2d"], [10, 3, 1, "", "uniform"]], "thefittest.utils.selections": [[11, 3, 1, "", "proportional_selection"], [11, 3, 1, "", "rank_selection"], [11, 3, 1, "", "tournament_selection"]], "thefittest.utils.transformations": [[12, 1, 1, "", "GrayCode"], [12, 1, 1, "", "SamplingGrid"], [12, 3, 1, "", "minmax_scale"]], "thefittest.utils.transformations.GrayCode": [[12, 2, 1, "", "bit_to_gray"], [12, 2, 1, "", "gray_to_bit"]], "thefittest.utils.transformations.SamplingGrid": [[12, 2, 1, "", "bit_to_int"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_bits_per_variable"], [12, 2, 1, "", "get_h_per_variable"], [12, 2, 1, "", "get_left_border"], [12, 2, 1, "", "get_num_variables"], [12, 2, 1, "", "get_right_border"], [12, 2, 1, "", "int_to_bit"], [12, 2, 1, "", "inverse_transform"], [12, 2, 1, "", "transform"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "terms": {"": [5, 9, 10], "0": [3, 5, 6, 7, 9, 10, 11, 12], "00": 12, "0008071201800187": 5, "02": 12, "03174603": 12, "04": 12, "05": [5, 12], "06349206": 12, "06666667": 12, "1": [3, 5, 6, 7, 9, 10, 11, 12], "10": [2, 5, 10, 12], "100": 6, "1000": 3, "1007": 5, "11": [7, 9], "1109": 5, "125": 12, "13": 12, "13333333": 12, "14285714e": 12, "15": [3, 6], "16": [5, 12], "180": 5, "187": 5, "1988": 2, "1991": 2, "1992": 5, "1993": 5, "1995": [2, 5], "1998": 2, "1d": [7, 9, 10, 11, 12], "2": [5, 7, 9, 10, 11, 12], "200": [3, 6], "2001": 5, "2006": 5, "2007": 5, "2012": 5, "2013": [2, 5], "2019": 5, "2038": 5, "23": 5, "24432": 2, "25": 12, "267": 5, "2_50": 5, "2d": [7, 10, 12], "3": [3, 5, 6, 7, 9, 10, 11, 12], "300": 3, "30976": 5, "37331197e": 12, "375": 12, "4": [5, 7, 9, 10, 11, 12], "40": 12, "414": 5, "421": 5, "45355": 5, "45696821e": 12, "5": [3, 5, 6, 7, 9, 10, 11, 12], "50": [3, 6], "500": [3, 6], "5220": 5, "540": 5, "5_26": 5, "6": [5, 7, 9, 10, 12], "6256587": 5, "642": 5, "64285714": 12, "646": 5, "6557555": 5, "657": 5, "66": 5, "7": [5, 7, 9, 10, 12], "71": 5, "72": 5, "7331": 5, "74509804e": 12, "75": 12, "78": 5, "8": [7, 9, 10, 11, 12], "872133": 5, "9": [3, 5, 6, 9, 10, 11, 12], "978": 5, "A": [2, 5, 7, 9, 10, 11], "For": 7, "If": [7, 10, 12], "In": 5, "It": 7, "No": 10, "Not": 9, "One": 7, "The": [3, 6, 7, 9, 10, 11, 12], "_bits_per_vari": 12, "_decod": 12, "_differentialevolut": [3, 6], "_float_to_bit": 12, "_geneticalgorithm": [3, 6], "_geneticprogram": [3, 6], "_h_per_vari": 12, "_jde": [3, 6], "_left_bord": 12, "_num_vari": 12, "_reversed_pow": 12, "_right_bord": 12, "_scalartype_co": [1, 5, 7], "_selfcga": [3, 6], "_selfcgp": [3, 6], "_shade": [3, 6], "_shaga": [3, 6], "acklei": [2, 4], "activ": [1, 3, 6], "ad": [3, 6, 9], "adapt": [5, 7], "add": [1, 3, 7, 9], "adjust": 9, "aeberhard": 2, "after": [7, 9], "akhmedova": 5, "alex": 5, "algorithm": [5, 7, 9, 10], "alia": [3, 6], "all": [7, 10], "allow": [3, 6, 7], "along": 7, "alpaydin": 2, "alreadi": 10, "also": 12, "american": 5, "an": [3, 6, 7, 9, 10, 12], "ani": [1, 2, 3, 5, 6, 7, 10, 12], "appli": 9, "ar": [3, 6, 7, 12], "archiv": 9, "arr": 10, "arr_2d": 10, "arrai": [7, 9, 10, 11, 12], "assertionerror": 12, "assign": 11, "attribut": 12, "authent": 2, "averag": 5, "avoid": 12, "ax": 1, "b": 5, "banknot": 2, "banknotedataset": [2, 4], "banzhaf": 5, "base": [0, 4, 5, 7, 9, 11, 12], "behav": 10, "being": [10, 11], "benchmark": [0, 4, 5], "berlin": 5, "best": 9, "best_1": [8, 9], "best_2": [8, 9], "best_individu": 9, "better": [7, 11], "between": [7, 9, 12], "beyond": 7, "bias": 10, "binari": [7, 9, 12], "binary_arrai": 12, "binary_popul": 12, "binary_string_popul": 5, "binomi": [7, 8], "binomialga": [7, 8], "bit": 12, "bit_arrai": 12, "bit_to_grai": 12, "bit_to_int": 12, "bits_per_vari": 12, "bool": [1, 3, 5, 6, 10], "boolean": 10, "border": 12, "borko": 5, "both": [7, 12], "boundari": 10, "bo\u0161kovi\u0107": 5, "breast": 2, "breastcancerdataset": [2, 4], "brest": 5, "build_grid": 2, "byte": [7, 9, 12], "c": [2, 5], "c50p49": 2, "c5231x": 2, "c55p57": 2, "c56c76": 2, "c5dw2b": 2, "c5pc7j": 2, "calcul": 12, "callabl": [1, 5], "cancer": 2, "cauchi": 10, "cauchy_distribut": [8, 10], "cauchy_result": 10, "cec": 5, "chanc": 7, "chang": [3, 6, 9], "check_random_st": [8, 10], "choos": [7, 11], "chosen": [7, 9], "chromosom": 7, "class": [1, 2, 3, 5, 6, 12], "classifi": [0, 4], "classmethod": 1, "co": [1, 3], "code": 12, "coin": 10, "colak": 2, "com": 2, "combin": [7, 9, 12], "common": 7, "compar": 5, "compet": 11, "complementari": 10, "complex": 5, "comput": 5, "concat": 1, "configur": 5, "congress": 5, "connect": 1, "contain": [7, 9, 11, 12], "content": 0, "continu": 5, "contribut": [7, 9], "control": 5, "convers": 12, "convert": 12, "copi": [1, 7], "correspond": 12, "cr": [5, 7], "creat": [7, 9], "credit": 2, "creditriskdataset": [2, 4], "crossov": [4, 5, 8], "crossover_threshold_proba": 5, "current": 9, "current_individu": 9, "current_to_best_1": [8, 9], "current_to_pbest_1_arch": [8, 9], "current_to_pbest_1_archive_p_min": [8, 9], "current_to_rand_1": [8, 9], "custom_pow": 12, "cyclic": 10, "data": 12, "dataset": 2, "decod": 12, "default": [3, 6, 10], "defin": [7, 12], "depth": [7, 9], "desir": 11, "determin": 7, "diagnost": 2, "dict": [1, 3, 5, 6], "differ": [9, 12], "differenti": [5, 7, 9], "differentialevolut": [3, 4, 5, 6], "digit": 2, "digitsdataset": [2, 4], "dimension": 12, "discret": 10, "displai": [7, 12], "distribut": 10, "div": [1, 3], "divid": 12, "doi": [2, 5], "done": 10, "drawn": 10, "dtype": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "dx": 5, "dynam": 9, "e": [2, 3, 5, 6], "each": [3, 6, 7, 9, 10, 11, 12], "ed": 5, "effect": [3, 6, 9], "effici": 5, "either": 12, "element": 10, "elit": 5, "empti": [5, 7], "empty_crossov": [7, 8], "empty_crossovergp": [7, 8], "enable_metadata_rout": [3, 6], "encod": 12, "entir": 9, "ephemeral_node_gener": 1, "ephemeralnod": [1, 4], "equal": [10, 12], "error": [3, 6], "estim": [3, 6], "eugen": 5, "eurogp": 5, "evolut": [5, 7, 9], "evolutionari": 5, "exampl": [7, 9, 10, 11, 12], "example_data": 12, "exce": 7, "exchang": 7, "exist": [3, 6], "extend": 12, "f": [2, 5, 9], "f_max": 5, "f_min": 5, "factor": 9, "fair": 10, "fals": [1, 3, 5, 6, 10], "fill": 11, "first": 7, "fisher": 2, "fit": [3, 5, 6, 7, 11, 12], "fitness_funct": 5, "fitness_function_arg": 5, "fitness_valu": [7, 11], "flip": [9, 10], "flip_coin": [8, 10], "flip_mut": [8, 9], "float": [3, 5, 6, 9, 10, 12], "float64": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "float_arrai": 12, "float_popul": 5, "floating_popul": 12, "follow": 10, "forina": 2, "form": [7, 12], "forward": 1, "from": [7, 9, 10, 11, 12], "fukunaga": 5, "full_growing_method": 1, "function": [7, 9, 10, 12], "functional_set": 1, "functional_set_nam": [1, 3, 7, 9], "functionalnod": [1, 4], "g": [3, 5, 6], "gene": 7, "gener": [1, 9, 10, 12], "generator1": [8, 10], "generator2": [8, 10], "genet": [5, 7, 9], "geneticalgorithm": [3, 4, 5, 6], "geneticprogram": [3, 4, 5, 6], "geneticprogrammingclassifi": [3, 4], "geneticprogrammingneuralnetclassifi": [3, 4], "geneticprogrammingneuralnetregressor": [4, 6], "genotype_to_phenotyp": 5, "genotype_to_phenotype_arg": 5, "genotype_to_phenotype_tre": [3, 6], "get": 12, "get_args_id": 1, "get_bits_per_vari": 12, "get_common_region": 1, "get_fittest": 5, "get_graph": 1, "get_h_per_vari": 12, "get_i": 2, "get_left_bord": 12, "get_level": 1, "get_max_level": 1, "get_net": [3, 6], "get_num_vari": 12, "get_remains_cal": 5, "get_right_bord": 12, "get_stat": [3, 5, 6], "get_tre": [3, 6], "get_x": 2, "get_x_nam": 2, "get_y_nam": 2, "given": [3, 6, 9, 10], "global": 5, "gp": 7, "gp_average_grow": 5, "gp_average_point": 5, "gp_one_point": 5, "gp_standard": 5, "gp_strong_grow": 5, "gp_strong_point": 5, "gp_uniform_rank_2": 5, "gp_weak_grow": 5, "gp_weak_point": 5, "grai": 12, "gray_arrai": 12, "gray_array_i": 12, "gray_popul": 12, "gray_to_bit": 12, "graycod": [8, 12], "greater": 10, "greiner": 5, "grid": 12, "griewank": [2, 4], "group": 11, "grow": 9, "growing_method": 1, "growing_mut": [8, 9], "guid": [3, 6], "h": [5, 12], "h_per_vari": 12, "ha": [3, 6, 10], "half_and_half": 5, "hamdi": 2, "handwritten": 2, "have": [7, 11], "heidelberg": 5, "hidden_lay": [1, 3, 6], "high": 10, "highconditionedellipt": [2, 4], "higher": [7, 11], "highest": [10, 11], "histori": [5, 7], "holland": 5, "how": [3, 6], "http": [2, 5], "i": [3, 6, 7, 9, 10, 11, 12], "ieee": 5, "ignor": [3, 6], "ilhami": 2, "import": [7, 9, 10, 11, 12], "index": 1, "indic": [9, 10], "individ": 7, "individu": [7, 9, 11, 12], "inherit": 12, "init_level": 5, "init_popul": 5, "init_symbolic_regression_uniset": [1, 4, 7, 9], "initi": [7, 9], "input": [1, 9, 10, 12], "input_block_s": [3, 6], "insid": [3, 6], "instanc": [10, 12], "instead": [3, 6], "int": [1, 3, 5, 6, 7, 9, 10, 11, 12], "int64": [1, 9, 10, 11, 12], "int8": [5, 7, 12], "int_arrai": 12, "int_to_bit": 12, "integ": [10, 12], "integer_arrai": 12, "interv": 10, "invers": 12, "inverse_transform": 12, "inverse_transformed_popul": 12, "involv": [7, 11], "iri": 2, "irisdataset": [2, 4], "iter": 5, "its": [7, 9], "j": 5, "janez": 5, "jde": [3, 4, 5, 6], "jit": 10, "john": 5, "journal": 5, "k": 5, "kaggl": 2, "kahraman": 2, "kaynak": 2, "keep_histori": 5, "keep_id": 1, "kenneth": 5, "knowledg": 2, "koza": 5, "kwarg": 1, "l": 5, "langdon": 5, "lanzi": 5, "learn": 2, "lectur": 5, "left": 12, "left_bord": [5, 12], "less": 10, "level": [7, 9], "like": 10, "likelihood": 7, "list": 1, "lnc": 5, "loc": 10, "loc_valu": 10, "locat": 10, "lohweg": 2, "low": 10, "lower": 10, "lowest": 10, "m": [2, 5], "machin": 2, "mangasarian": 2, "maria": 5, "marjan": 5, "materi": 7, "matrix": 12, "max": 12, "max_depth": 7, "max_hidden_block_s": [3, 6], "max_lev": 9, "max_level": [1, 5, 7, 9], "max_tree_level": [7, 9], "maximum": [7, 9, 12], "mean": [5, 7], "mechan": [3, 6], "mernik": 5, "meta": [3, 6], "metadata": [3, 6], "metadata_rout": [3, 6], "method": [1, 2, 3, 5, 6, 9, 12], "miller": 5, "min": 12, "minim": 5, "minimum": 12, "minmax_scal": [8, 12], "mlpeaclassifi": [3, 4], "mlpearegressor": [4, 6], "model": 2, "modifi": 5, "modul": 0, "more": 7, "mtrand": [3, 6], "mul": [1, 3, 7, 9], "mutant": 7, "mutat": [4, 5, 8], "mutated_individu": 9, "mutated_tre": 9, "mutation_prob": 9, "mutation_r": 5, "mutation_scale_factor": 9, "mutation_threshold_proba": 5, "n_arg": 1, "n_iter": [3, 6], "n_job": 5, "name": [1, 3, 6], "natur": 5, "ndarrai": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "neither": 12, "net": [1, 4], "net_size_penalti": [3, 6], "new": [7, 9, 10], "nick": 2, "niehau": 5, "no_increase_num": 5, "node": [1, 9], "none": [1, 3, 5, 6, 10, 12], "note": [3, 5, 6, 7, 9, 10, 11, 12], "np": [7, 9, 10, 11, 12], "num_select": 11, "num_vari": [5, 12], "numba": 10, "numba_se": [8, 10], "number": [5, 10, 11, 12], "numer": [5, 12], "numpi": [3, 6, 7, 9, 10, 11, 12], "object": [3, 6, 7, 12], "offset": [3, 6], "offspr": 7, "olvi": 2, "on_gener": 5, "one": [7, 9, 12], "one_point": [5, 7], "one_point_crossov": [7, 8], "one_point_crossovergp": [7, 8], "onemax": [2, 4], "ones": 12, "onli": [3, 6, 12], "oper": [5, 7], "optic": 2, "optim": [0, 3, 4, 6], "optimal_valu": 5, "optimizer_arg": [3, 6], "option": [3, 6, 12], "org": [2, 5], "origin": [3, 6, 7, 9, 12], "original_individu": 9, "other": [3, 6, 7, 9], "other_tre": 1, "otherwis": [3, 6, 10], "output": [1, 10], "over": 5, "p": 5, "p_min": 9, "pair": 9, "paramet": [3, 5, 6, 7, 9, 10, 11, 12], "parent": 7, "parent1": 7, "parent2": 7, "parent3": 7, "parents_num": 5, "part": 7, "pass": [3, 6], "pbest": 9, "pbest_indic": 9, "pdpga": [4, 5], "pdpgp": [4, 5], "per": 12, "perform": [7, 9, 10, 11], "permut": 10, "pipelin": [3, 6], "place": [10, 12], "pleas": [3, 6], "plot": 1, "point": [7, 9, 12], "point_mut": [8, 9], "pop_arch": 9, "pop_siz": [3, 5, 6], "popul": [9, 12], "posit": 9, "potenti": 7, "power": 12, "pp": 5, "predict": [3, 6], "predict_proba": 3, "previou": 9, "price": 5, "print": [7, 9, 10, 11, 12], "proba": 9, "probabl": [5, 7, 9, 10, 11], "problem": 5, "process": [7, 11], "program": [5, 7, 9], "proport": [5, 7, 11], "proportional_select": [8, 11], "provid": [3, 6, 12], "prune": 9, "quantiti": [10, 11], "r": [2, 5], "rainer": 5, "rais": [3, 6, 10, 12], "rand": [9, 12], "rand_1": [5, 8, 9], "rand_2": [8, 9], "rand_to_best1": [8, 9], "randint": [8, 10, 12], "random": [3, 4, 6, 7, 8, 9, 12], "random_sampl": [8, 10], "random_st": [3, 5, 6], "random_tre": [1, 7, 9], "random_weighted_sampl": [8, 10], "randomli": [7, 9, 11], "randomst": [3, 5, 6, 10], "rang": 10, "range_s": 10, "rank": [5, 7, 11], "rank_select": [8, 11], "rank_valu": 11, "rastrigin": [2, 4], "real": 7, "recalcul": 12, "recognit": 2, "refer": 0, "region": 7, "regress": [7, 9], "regressor": [0, 4], "relev": [3, 6], "repeat": 11, "replac": [7, 9, 10], "repositori": 2, "repres": [7, 9, 10, 12], "represent": [9, 12], "request": [3, 6], "result": [7, 10, 12], "result_custom_pow": 12, "retain": [3, 6], "return": [3, 6, 7, 9, 10, 11, 12], "revers": 12, "right": 12, "right_bord": [5, 12], "risk": 2, "root": 9, "rosenbrock": [2, 4], "rout": [3, 6], "row": [7, 10, 12], "ryan": 5, "ryoji": 5, "sagiroglu": 2, "sampl": [10, 12], "sample_weight": [3, 6], "sampled_indic": 10, "sampled_indices_no_replac": 10, "samplinggrid": [8, 12], "sao": 5, "sattolo": 10, "sattolo_shuffl": [8, 10], "sattolo_shuffle_2d": [8, 10], "scale": [9, 10, 12], "scale_valu": 10, "scaled_data": 12, "scheme": 5, "schwefe1_2": [2, 4], "scienc": 5, "scientif": 5, "score": [3, 6], "second": 7, "see": [3, 6], "seed": 10, "seed_valu": 10, "select": [4, 5, 7, 8, 9, 10], "selected_individu": 11, "selection_threshold_proba": 5, "self": [3, 5, 6], "selfcga": [3, 4, 5, 6], "selfcgp": [3, 4, 5, 6], "semenkin": 5, "semenkina": 5, "seref": 2, "set": [1, 7, 9], "set_config": [3, 6], "set_score_request": [3, 6], "set_termin": 1, "shade": [3, 4, 5, 6], "shaga": [3, 4, 5, 6, 7], "shakhnaz": 5, "should": [3, 6, 10, 12], "show_progress_each": 5, "shrink": 9, "shrink_mut": [8, 9], "shuffl": 10, "sigma": [3, 6], "sign": 1, "simpl": 5, "simpli": 7, "simul": 10, "sin": [1, 3], "singl": 12, "singleton": 10, "size": [9, 10, 11, 12], "size_valu": 10, "sklearn": [3, 6], "some": [3, 6], "space": 5, "specifi": [7, 10, 12], "sphere": [2, 4], "springer": 5, "standard": 7, "standard_crossov": [7, 8], "stanovov": 5, "static": [5, 12], "stefan": 2, "step": 12, "store": 12, "storn": 5, "str": [1, 3, 5, 6], "str_len": 5, "strategi": 9, "street": 2, "string_length": 12, "strong": 5, "structur": 9, "studi": 5, "sub": [1, 3, 6], "subtre": [1, 7, 9], "subtree_id": 1, "success": [5, 7, 12], "sum": 12, "swap": [7, 9], "swap_mut": [8, 9], "symbol": [7, 9], "system": [5, 12], "t_cr": 5, "t_f": 5, "tanab": 5, "termin": 9, "terminal_set": 1, "terminalnod": [1, 4], "termination_error_valu": 5, "test_sample_ratio": [3, 6], "tettamanzi": 5, "tevc": 5, "than": 10, "thefittest": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "them": 9, "thi": [3, 6, 7, 9, 11, 12], "third": 9, "three": 9, "threshold": 10, "through": 7, "tomassini": 5, "tour_siz": [5, 11], "tournament": [7, 11], "tournament_3": 5, "tournament_5": 5, "tournament_7": 5, "tournament_s": 11, "tournament_select": [8, 11], "toward": 10, "transact": 5, "transform": [4, 8], "tree": [1, 4, 7, 9], "true": [3, 5, 6, 10], "tupl": [1, 3, 5, 6], "turn": 10, "two": [7, 9, 12], "two_point": 5, "two_point_crossov": [7, 8], "type": [3, 6], "uci": 2, "unchang": [3, 6], "undergo": 9, "uniform": [5, 7, 8, 10], "uniform_2": 5, "uniform_7": 5, "uniform_crossov": [7, 8], "uniform_crossovergp": [7, 8], "uniform_prop_2": 5, "uniform_prop_7": 5, "uniform_proportional_crossov": [7, 8], "uniform_proportional_crossover_gp": [7, 8], "uniform_rank_2": 5, "uniform_rank_7": 5, "uniform_rank_crossov": [7, 8], "uniform_rank_crossover_gp": [7, 8], "uniform_tour_3": 5, "uniform_tour_7": 5, "uniform_tournament_crossov": [7, 8], "uniform_tournament_crossover_gp": [7, 8], "union": [10, 12], "uniset": [1, 5, 9], "univers": [7, 9], "universal_set": [7, 9], "universalset": [1, 4, 5, 9], "unus": 9, "upadorprofz": 2, "updat": [3, 6], "upper": 10, "us": [3, 6, 7, 9, 10, 11, 12], "user": [2, 3, 6], "userknowladgedataset": [2, 4], "util": [0, 3, 4, 6, 7, 9, 10, 11, 12], "valu": [1, 7, 9, 10, 11, 12], "valueerror": 10, "variabl": 12, "version": [3, 6], "viljem": 5, "vladimir": 5, "vol": 5, "volker": 2, "w": [2, 5], "weak": 5, "weierstrass": [2, 4], "weight": [1, 10], "weights_optim": [3, 6], "weights_optimizer_arg": [3, 6], "well": 12, "where": [7, 10, 12], "whether": 10, "while": 10, "william": 2, "wine": 2, "winedataset": [2, 4], "winner": 11, "wisconsin": 2, "within": [7, 10], "without": [7, 10], "wolberg": 2, "work": [3, 6], "www": 2, "x": [1, 2, 3, 6, 7, 9], "you": [3, 6], "zumer": 5}, "titles": ["Welcome to Thefittest\u2019s documentation!", "base", "benchmarks", "classifiers", "Modules", "optimizers", "regressors", "crossovers", "utils", "mutations", "random", "selections", "transformations", "References"], "titleterms": {"": 0, "base": 1, "benchmark": 2, "classifi": 3, "crossov": 7, "document": 0, "modul": 4, "mutat": 9, "optim": 5, "random": 10, "refer": 13, "regressor": 6, "select": 11, "thefittest": 0, "transform": 12, "util": 8, "welcom": 0}})